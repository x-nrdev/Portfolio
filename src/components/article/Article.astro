---
import type { ArticleType, ProjectType } from "@src/types";
import ArticleImage from "@components/article/ArticleImage.astro";
import ArticleTitle from "@components/article/ArticleTitle.astro";
import ArticleSkills from "@components/article/ArticleSkills.astro";
import ArticleDate from "@components/article/ArticleDate.astro";
import ArticleContent from "@components/article/ArticleContent.astro";
import H4 from "@components/headings/H4.astro"

const md = Astro.props;
const { class: className = "", isMargin = false } = Astro.props;
const { data } = md;
const { Content } = await md.render();
const { title, skills, link, date, subTitle } = data as ArticleType | ProjectType;
const { imageSrc }: { imageSrc?: string } = data;

let formatedDate: string | Date = date;

if (date instanceof Date) {
    formatedDate = date.toISOString().split("T")[0];
}

function instanceOfProject(data: any): data is ProjectType {
    return "imageSrc" in data;
}

const isProject = instanceOfProject(data);

---

<article
    class=`article-transition  transition-opacity duration-custom ease-in-out  lg:rounded-[10px] lg:p-4 py-4 lg:block ${link && "group lg:hover:backdrop-blur-sm lg:hover:bg-white/[.025] lg:hover:cursor-pointer lg:group-hover/opacity:[&:not(:hover)]:opacity-20 fn-article-link "} ${imageSrc && "md:flex md:gap-x-12"} ${className} ${isMargin ? "mb-section-gap" : ""}`
    data-href=`${link && link}`
>
    {
    imageSrc ? 
    <div>
        <ArticleImage title={title} imageSrc={imageSrc} link={link} />
    </div>
    <div>
        <ArticleTitle title={title} link={link} />
        <div>
            <H4 title={subTitle} isMargin={true}/>
            <ArticleDate date={formatedDate} isProject={isProject} />
        </div>
        <ArticleContent Content={Content} />
        <ArticleSkills skills={skills} />
    </div> 
    : 
        <ArticleImage title={title} imageSrc={imageSrc} link={link} />
        <ArticleTitle title={title} link={link} />
        <div>
            <H4 title={subTitle} isMargin={true}/>
            <ArticleDate date={formatedDate} isProject={isProject} />
        </div>
        <ArticleContent Content={Content} />
        <ArticleSkills skills={skills} />
}
</article>

<style>
    .article-transition {
        transition: all 0.3s ease-in-out;
    }
</style>

<script>
    const articleClick = () => {
        let listenersAttached = false;

    const handleArticleClick = () => {
        const articles = document.querySelectorAll(".fn-article-link");
        articles.forEach((article) => {
            if (!(article instanceof HTMLElement)) return;
            article.addEventListener("click", handleClick);
        });
    };

    const removeArticleClick = () => {
        const articles = document.querySelectorAll(".fn-article-link");
        articles.forEach((article) => {
            if (!(article instanceof HTMLElement)) return;
            article.removeEventListener("click", handleClick);
        });
    };

    const handleClick = (event: Event) => {
        event.preventDefault();
        const article = event.currentTarget as HTMLElement;
        if (article instanceof HTMLElement) {
            const { href } = article.dataset;
            if (href) {
                window.open(href, "_blank");
            }
        }
    };

    const handleResize = () => {
        if (window.innerWidth >= 1024 && !listenersAttached) {
            handleArticleClick();
            listenersAttached = true;
        } else if (window.innerWidth < 1024 && listenersAttached) {
            removeArticleClick();
            listenersAttached = false;
        }
    };

    // Attach the event listener on page load if the width is greater than 1024px
    if (window.innerWidth > 1024) {
        handleArticleClick();
        listenersAttached = true;
    }

    window.addEventListener("resize", handleResize);
    }

    articleClick()
    document.addEventListener("astro:after-swap", articleClick)
</script>
